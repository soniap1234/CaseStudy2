
%% Part 2
clear all
close all

load COVID_STL.mat

new_cases(1) = cases_STL(1);
new_deaths(1) = cases_STL(1);

for i = 1:157
    new_cases(i+1) =  cases_STL(i+1)-cases_STL(i);
    new_cases_percent(i) = new_cases(i)/POP_STL;
    infected_percent(i) = cases_STL(i)/POP_STL;
end 
%%
for i = 1:157
    new_deaths(i+1) = deaths_STL(i+1)-deaths_STL(i);
    new_deaths_percent(i) = new_deaths(i)/POP_STL;
    deaths_percent(i) = deaths_STL(i)/POP_STL;
end
%%

infected_percent(158) = cases_STL(158)/POP_STL;
deaths_percent(158) = deaths_STL(158)/POP_STL;

%%

Q = @(x) [x(1) x(2) 0 0; x(3) x(4) 0 0; 0 x(5) 1 0; 0 x(6) 0 1];
%Q = zeros(4,4) %[0 0 0 0; 0.05 0.85 0 0; 0 0.1 1 0; 0 0.01 0 1];

%Q = [0.7 0.04 0 0; 0.05 0.85 0 0; 0 0.1 1 0; 0 0.01 0 1];

%x1 = [1 0 0 1 0 1];

a = 0.976;
c = 1-a;
d = 0.70;
e = 0.09;
f = 0.0005;
b = 1-d-e-f;

Vect = [a; b; c; d; e; f];

QAttempt = feval(Q, Vect);

%%

% B = zeros(4,1); %B = zeros, so Bu(t) = 0, which means there are no external inputs. state x(t) only evolves using A.
% 
% x0 = [0.9 0.1 0 0]; %initial state of SIRD
% 
% C = eye(4);
% D = zeros(4,1);

%sys_sir_base = ss(A,B,eye(4),zeros(4,1),1); %OG code

            %sys_sir_base = ss(QAttempt,B,C,D,1); 

%A = initial state, B  = zeros, so x(t) only evolves with A.
% C is a 4x4 identity matrix, and D is zero, which means that y(t), the output
%of the system is just the current state of x(t)
%the last ",1" means sample time 1s

             %Y = lsim(sys_sir_base, zeros(1000,1), linspace(0,999,1000),  x0); % u = zeros, meaning there are no external inputs at time t

%%

y = infected_percent;
z = deaths_percent;

%lb = zeros(6,1); % All entries non-negative
%ub = ones(6,1); % All entries less than or equal to 1


x0 = [1 0 0 0];

QSim = DATA(QAttempt, x0', 158);
NewSim = NEW(QAttempt, x0', 158);
DCumMat = DCUM(QSim, NewSim, f);
ICumMat = ICUM(QSim, NewSim, c);

J = leastsquares(ICumMat, DCumMat, y, z, x0')


%
figure
hold on
%plot(Y); % plot the output trajectory
%plot(CumMat(1,:))
plot(ICumMat(1,:))
%plot(CumMat(3,:))
plot(DCumMat(1,:))
plot(infected_percent)
plot(deaths_percent)


%legend('S','I','R','D', 'IData%', 'DData%');
legend('I','D', 'IData%', 'DData%');
%legend('I', 'IData%', 'DData%');
xlabel('Time')
ylabel('Percentage Population');

xlim([0,160])
ylim([0,0.4])
%}



function CostVal = leastsquares(QIIn, QDIn, IDat, DDat, xi)

runningsum = 0;

for  k = 1:(length(QIIn)-1) % Combine these
      runningsum = (QDIn(1,k)-DDat(1,k))'*(QDIn(1,k)-DDat(1,k))+(QIIn(1,k)-IDat(1,k))'*(QIIn(1,k)-IDat(1,k))+ runningsum;
end


CostVal = runningsum;
end



function Datas = DATA(QIn, xi, n)

QData(:,1) = xi;

for  k = 1:(n-1) % Combine these
    QData(:,k+1) = QIn*QData(:,k);
end

Datas = QData;
end



function News = NEW(QIn, xi, n)

QData(:,1) = xi;
QNew(:,1) = xi;

for  k = 1:(n-1) % Combine these
    QData(:,k+1) = QIn*QData(:,k);
    QNew(:,k+1) = QData(:,k+1) - QData(:,k);
end

News = QNew;
end



%
function ICum = ICUM(DataMat, NewMat, Mat21)

ICumSum(1,1) = NewMat(2,1);

for  k = 2:(length(NewMat)) % Combine these
    %ICumSum(1,k+1) = ICumSum(1,k) + NewMat(2,k+1) + NewMat(4,k+1) + NewMat(3,k+1) + NewMat(1,k+1) + Mat21*DataMat(1,k);
    ICumSum(1,k) = DataMat(2,k) + NewMat(2,k) - NewMat(4,k) - NewMat(3,k) - NewMat(1,k);
    %ICumSum(1,k+1) = ICumSum(1,k) + NewMat(4,k) + NewMat(3,k) + NewMat(1,k) + 2*Mat21*DataMat(1,k);
end

ICum = ICumSum;
end
%}


function DCum = DCUM(DataMat, NewMat, Mat42)

DCumSum = DataMat(4,:);

DCum = DCumSum;
end

